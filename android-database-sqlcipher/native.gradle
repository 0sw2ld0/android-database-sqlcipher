task buildOpenSSL () {
  onlyIf {
    def armNativeFile = new File("${androidNativeRootDir}/armeabi/libcrypto.a")
    return !armNativeFile.exists()
  }
  doLast {
    exec {
      workingDir "${projectDir}"
      commandLine "./build-openssl-libraries.sh",
      "${minimumAndroidSdkVersion}",
      "${minimumAndroid64BitSdkVersion}"
    }
  }
}

task buildAmalgamation () {
  doLast {
    exec {
      workingDir "${projectDir}/src/main/external/sqlcipher"
      environment("CFLAGS", "${sqlcipherCFlags}")
      commandLine "./configure", "--enable-tempstore=yes", "--with-crypto-lib=none"
    }
    exec {
      workingDir "${projectDir}/src/main/external/sqlcipher"
      environment("CFLAGS", "${sqlcipherCFlags}")
      commandLine "make",  "sqlite3.c"
    }
  }
}

task buildNative() {
  description "Build the native SQLCipher binaries"
  doLast {
    executeNdkBuild(
      "${nativeRootOutputDir}/libs",
      file("src/main/cpp").absolutePath,
      file("src/main/cpp/Application.mk").absolutePath,
      "${sqlcipherCFlags}")
  }
}

task cleanOpenSSL() {
  description "Clean the OpenSSL source"
  doLast {
    logger.info "Cleaning OpenSSL source"
    gitClean("${opensslDir}")
  }
}

task cleanSQLCipher() {
  description "Clean the SQLCipher source"
  doLast {
    logger.info "Cleaning SQLCipher source"
    gitClean("${sqlcipherDir}")
  }
}

task cleanNative() {
  description "Clean the native (JNI) build artifacts"
  doLast {
    logger.info "Cleaning native build artifacts"
    ["libs", "obj"].each {
      File file = new File("${projectDir}/src/main/${it}")
      if(file.exists()){
        file.deleteDir()
      }
    }
  }
}

task distclean(dependsOn: [clean, cleanSQLCipher, cleanOpenSSL]) {
  description "Clean build, SQLCipher, and OpenSSL artifacts"
  doLast {
    new File("${androidNativeRootDir}/").deleteDir()
  }
}

def gitClean(directory) {
  logger.info "Cleaning directory:${directory}"
  exec {
    workingDir "${directory}"
    commandLine "git", "checkout", "-f"
  }
  exec {
    workingDir "${directory}"
    commandLine "git", "clean", "-d", "-f"
  }
}

def executeNdkBuild(outputDir, androidMkDirectory, applicationMkFile, cflags) {
  logger.info "Executing NDK build command"
  exec {
    def outputDirectory = "NDK_LIBS_OUT=${outputDir}"
    def applicationFile = "NDK_APPLICATION_MK=${applicationMkFile}"
    environment("SQLCIPHER_CFLAGS", "${cflags}")
    commandLine "ndk-build",
    "--environment-overrides", outputDirectory,
    "-C", androidMkDirectory, applicationFile
  }
}
